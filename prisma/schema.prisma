generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")

  relationMode = "prisma"
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model User {
  id             String    @id @default(cuid())
  name           String
  email          String    @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now()) @map(name: "created_at")
  updatedAt      DateTime  @default(now()) @map(name: "updated_at")

  accounts      Account[]
  sessions      Session[]
  listings      Listing[]
  favorites     Favorite[]
  ratings       Rating[]       @relation("RatedUser")
  notifications Notification[]
  messages      Message[]

  @@map(name: "users")
}

model Listing {
  id           Int      @id @default(autoincrement())
  title        String   @db.VarChar(255)
  category     String   @db.VarChar(32)
  price        Float
  isFixedPrice Boolean  @map(name: "fixed_price")
  isTradeable  Boolean  @map(name: "is_tradeable")
  condition    String   @db.VarChar(32)
  description  String?  @db.VarChar(1000)
  createdAt    DateTime @default(now())
  authorId     String   @db.VarChar(255)
  username     String   @db.VarChar(32)
  location     String   @db.VarChar(32)
  phoneNumber  String   @map(name: "phone_number") @db.VarChar(32)
  views        Int      @default(0)
  slug         String   @default("/") @db.VarChar(255)

  images    ListingImage[]
  favorites Favorite[]
  ratings   Rating[]
  chats     Chat[]
  user      User           @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([authorId])
}

model ListingImage {
  id        Int    @id @default(autoincrement())
  imageUrl  String @db.VarChar(255)
  listingId Int

  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@index([listingId])
}

model Favorite {
  id        Int    @id @default(autoincrement())
  userId    String @db.VarChar(255)
  listingId Int

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@unique([userId, listingId])
  @@index([userId])
  @@index([listingId])
}

model Rating {
  id            Int      @id @default(autoincrement())
  authorId      String   @db.VarChar(255)
  ratedUserId   String   @db.VarChar(255)
  createdAt     DateTime @default(now())
  listingId     Int
  description   Boolean
  communcation  Boolean
  promise       Boolean
  overallRating Boolean
  comment       String   @db.VarChar(255)
  chatId        Int

  ratedUser User    @relation("RatedUser", fields: [ratedUserId], references: [id], onDelete: Cascade)
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  chat      Chat    @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@unique([ratedUserId, authorId, chatId])
  @@index([ratedUserId])
  @@index([listingId])
  @@index([chatId])
}

model Notification {
  id          Int      @id @default(autoincrement())
  userId      String   @db.VarChar(255)
  createdAt   DateTime @default(now())
  title       String   @db.VarChar(64)
  description String   @db.VarChar(255)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Chat {
  id        Int    @id @default(autoincrement())
  listingId Int
  userOneId String @db.VarChar(255)
  userTwoId String @db.VarChar(255)

  messages Message[]
  ratings  Rating[]
  listing  Listing   @relation(fields: [listingId], references: [id])

  @@unique([listingId, userOneId, userTwoId])
  @@index([listingId])
}

model Message {
  id        Int      @id @default(autoincrement())
  chatId    Int
  senderId  String   @db.VarChar(255)
  message   String   @db.VarChar(1000)
  createdAt DateTime @default(now())

  chat   Chat @relation(fields: [chatId], references: [id])
  sender User @relation(fields: [senderId], references: [id])

  @@index([chatId])
  @@index([senderId])
}
